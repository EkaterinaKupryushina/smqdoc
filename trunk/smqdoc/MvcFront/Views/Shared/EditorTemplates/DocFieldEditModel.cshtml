@using MvcFront.DB
@using Telerik.Web.Mvc.UI
@model MvcFront.Models.DocFieldEditModel

@{
    @Html.HiddenFor(x=>x.FieldId)
    @Html.HiddenFor(x => x.FieldType)
    @Html.HiddenFor(x => x.IsRestricted)
    switch ((FieldTemplateType)Model.FieldType)
    {
        case FieldTemplateType.BOOL:
            @Html.EditorFor(x => x.BoolValue);
            break;
        case FieldTemplateType.NUMBER:
            @(Model.IsRestricted ? Html.Telerik().NumericTextBoxFor(x => x.DoubleValue).MaxValue(Model.MaxVal).MinValue(Model.MinVal).EmptyMessage("Введите число").InputHtmlAttributes(new Dictionary<string, object> {{"docFieldId", Model.FieldId}}) : Html.Telerik().NumericTextBoxFor(x => x.DoubleValue).EmptyMessage("Введите число").InputHtmlAttributes(new Dictionary<string, object> {{"docFieldId", Model.FieldId}}))
        break;
        case FieldTemplateType.STRING:
            @Html.EditorFor(x => x.StringValue,new {@class="stringfield"})
            break;         
        case FieldTemplateType.CALCULATED:
            var ids = "";
            @*Model.ComputebleFieldIds.ForEach(x=>ids+=x.ToString()+";");
            @Html.TextBoxFor(x => x.DoubleValue,new Dictionary<string, object> {{"calcids", ids},{"calcoper",Model.CalcOperationType},{ "readonly","true" }})*@
       break;     
        default:
            throw new ArgumentOutOfRangeException();
    }
}
